// Code generated by mockery v2.43.2. DO NOT EDIT.

package diskapimocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	diskapi "github.com/yandex-cloud/yc-csi-driver/pkg/diskapi"
)

// DiskAPI is an autogenerated mock type for the DiskAPI type
type DiskAPI struct {
	mock.Mock
}

// AttachDisk provides a mock function with given fields: _a0, _a1
func (_m *DiskAPI) AttachDisk(_a0 context.Context, _a1 *diskapi.AttachDiskRequest) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AttachDisk")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *diskapi.AttachDiskRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateDisk provides a mock function with given fields: _a0, _a1
func (_m *DiskAPI) CreateDisk(_a0 context.Context, _a1 *diskapi.CreateDiskRequest) (*diskapi.Disk, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateDisk")
	}

	var r0 *diskapi.Disk
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diskapi.CreateDiskRequest) (*diskapi.Disk, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diskapi.CreateDiskRequest) *diskapi.Disk); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diskapi.Disk)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diskapi.CreateDiskRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSnapshot provides a mock function with given fields: _a0, _a1
func (_m *DiskAPI) CreateSnapshot(_a0 context.Context, _a1 *diskapi.CreateSnapshotRequest) (*diskapi.Snapshot, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateSnapshot")
	}

	var r0 *diskapi.Snapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diskapi.CreateSnapshotRequest) (*diskapi.Snapshot, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diskapi.CreateSnapshotRequest) *diskapi.Snapshot); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diskapi.Snapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diskapi.CreateSnapshotRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDisk provides a mock function with given fields: _a0, _a1
func (_m *DiskAPI) DeleteDisk(_a0 context.Context, _a1 *diskapi.DeleteDiskRequest) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDisk")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *diskapi.DeleteDiskRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSnapshot provides a mock function with given fields: _a0, _a1
func (_m *DiskAPI) DeleteSnapshot(_a0 context.Context, _a1 *diskapi.DeleteSnapshotRequest) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *diskapi.DeleteSnapshotRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DetachDisk provides a mock function with given fields: _a0, _a1
func (_m *DiskAPI) DetachDisk(_a0 context.Context, _a1 *diskapi.DetachDiskRequest) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DetachDisk")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *diskapi.DetachDiskRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureObjectLabels provides a mock function with given fields: ctx, req
func (_m *DiskAPI) EnsureObjectLabels(ctx context.Context, req *diskapi.EnsureObjectLabelsRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for EnsureObjectLabels")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *diskapi.EnsureObjectLabelsRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExpandDisk provides a mock function with given fields: _a0, _a1
func (_m *DiskAPI) ExpandDisk(_a0 context.Context, _a1 *diskapi.ExpandDiskRequest) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ExpandDisk")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *diskapi.ExpandDiskRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDisk provides a mock function with given fields: _a0, _a1
func (_m *DiskAPI) GetDisk(_a0 context.Context, _a1 *diskapi.GetDiskRequest) (*diskapi.Disk, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetDisk")
	}

	var r0 *diskapi.Disk
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diskapi.GetDiskRequest) (*diskapi.Disk, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diskapi.GetDiskRequest) *diskapi.Disk); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diskapi.Disk)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diskapi.GetDiskRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiskByName provides a mock function with given fields: _a0, _a1
func (_m *DiskAPI) GetDiskByName(_a0 context.Context, _a1 *diskapi.GetDiskByNameRequest) (*diskapi.Disk, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetDiskByName")
	}

	var r0 *diskapi.Disk
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diskapi.GetDiskByNameRequest) (*diskapi.Disk, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diskapi.GetDiskByNameRequest) *diskapi.Disk); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diskapi.Disk)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diskapi.GetDiskByNameRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstance provides a mock function with given fields: _a0, _a1
func (_m *DiskAPI) GetInstance(_a0 context.Context, _a1 *diskapi.GetInstanceRequest) (*diskapi.Instance, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetInstance")
	}

	var r0 *diskapi.Instance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diskapi.GetInstanceRequest) (*diskapi.Instance, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diskapi.GetInstanceRequest) *diskapi.Instance); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diskapi.Instance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diskapi.GetInstanceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapshot provides a mock function with given fields: _a0, _a1
func (_m *DiskAPI) GetSnapshot(_a0 context.Context, _a1 *diskapi.GetSnapshotRequest) (*diskapi.Snapshot, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSnapshot")
	}

	var r0 *diskapi.Snapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diskapi.GetSnapshotRequest) (*diskapi.Snapshot, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diskapi.GetSnapshotRequest) *diskapi.Snapshot); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diskapi.Snapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diskapi.GetSnapshotRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapshotByName provides a mock function with given fields: _a0, _a1
func (_m *DiskAPI) GetSnapshotByName(_a0 context.Context, _a1 *diskapi.GetSnapshotByNameRequest) (*diskapi.Snapshot, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSnapshotByName")
	}

	var r0 *diskapi.Snapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diskapi.GetSnapshotByNameRequest) (*diskapi.Snapshot, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diskapi.GetSnapshotByNameRequest) *diskapi.Snapshot); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diskapi.Snapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diskapi.GetSnapshotByNameRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDisks provides a mock function with given fields: _a0, _a1
func (_m *DiskAPI) ListDisks(_a0 context.Context, _a1 *diskapi.ListDisksRequest) ([]*diskapi.Disk, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListDisks")
	}

	var r0 []*diskapi.Disk
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diskapi.ListDisksRequest) ([]*diskapi.Disk, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diskapi.ListDisksRequest) []*diskapi.Disk); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*diskapi.Disk)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diskapi.ListDisksRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSnapshots provides a mock function with given fields: ctx, req
func (_m *DiskAPI) ListSnapshots(ctx context.Context, req *diskapi.ListSnapshotsRequest) (*diskapi.ListSnapshotsResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListSnapshots")
	}

	var r0 *diskapi.ListSnapshotsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *diskapi.ListSnapshotsRequest) (*diskapi.ListSnapshotsResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *diskapi.ListSnapshotsRequest) *diskapi.ListSnapshotsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*diskapi.ListSnapshotsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *diskapi.ListSnapshotsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDiskAPI creates a new instance of DiskAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDiskAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *DiskAPI {
	mock := &DiskAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
