// Code generated by mockery v2.38.0. DO NOT EDIT.

package endpointmocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	endpoint "github.com/yandex-cloud/go-genproto/yandex/cloud/endpoint"
)

// ApiEndpointServiceServer is an autogenerated mock type for the ApiEndpointServiceServer type
type ApiEndpointServiceServer struct {
	mock.Mock
}

type ApiEndpointServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *ApiEndpointServiceServer) EXPECT() *ApiEndpointServiceServer_Expecter {
	return &ApiEndpointServiceServer_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *ApiEndpointServiceServer) Get(_a0 context.Context, _a1 *endpoint.GetApiEndpointRequest) (*endpoint.ApiEndpoint, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *endpoint.ApiEndpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *endpoint.GetApiEndpointRequest) (*endpoint.ApiEndpoint, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *endpoint.GetApiEndpointRequest) *endpoint.ApiEndpoint); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*endpoint.ApiEndpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *endpoint.GetApiEndpointRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApiEndpointServiceServer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ApiEndpointServiceServer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *endpoint.GetApiEndpointRequest
func (_e *ApiEndpointServiceServer_Expecter) Get(_a0 interface{}, _a1 interface{}) *ApiEndpointServiceServer_Get_Call {
	return &ApiEndpointServiceServer_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *ApiEndpointServiceServer_Get_Call) Run(run func(_a0 context.Context, _a1 *endpoint.GetApiEndpointRequest)) *ApiEndpointServiceServer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*endpoint.GetApiEndpointRequest))
	})
	return _c
}

func (_c *ApiEndpointServiceServer_Get_Call) Return(_a0 *endpoint.ApiEndpoint, _a1 error) *ApiEndpointServiceServer_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ApiEndpointServiceServer_Get_Call) RunAndReturn(run func(context.Context, *endpoint.GetApiEndpointRequest) (*endpoint.ApiEndpoint, error)) *ApiEndpointServiceServer_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: _a0, _a1
func (_m *ApiEndpointServiceServer) List(_a0 context.Context, _a1 *endpoint.ListApiEndpointsRequest) (*endpoint.ListApiEndpointsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *endpoint.ListApiEndpointsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *endpoint.ListApiEndpointsRequest) (*endpoint.ListApiEndpointsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *endpoint.ListApiEndpointsRequest) *endpoint.ListApiEndpointsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*endpoint.ListApiEndpointsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *endpoint.ListApiEndpointsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApiEndpointServiceServer_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ApiEndpointServiceServer_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *endpoint.ListApiEndpointsRequest
func (_e *ApiEndpointServiceServer_Expecter) List(_a0 interface{}, _a1 interface{}) *ApiEndpointServiceServer_List_Call {
	return &ApiEndpointServiceServer_List_Call{Call: _e.mock.On("List", _a0, _a1)}
}

func (_c *ApiEndpointServiceServer_List_Call) Run(run func(_a0 context.Context, _a1 *endpoint.ListApiEndpointsRequest)) *ApiEndpointServiceServer_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*endpoint.ListApiEndpointsRequest))
	})
	return _c
}

func (_c *ApiEndpointServiceServer_List_Call) Return(_a0 *endpoint.ListApiEndpointsResponse, _a1 error) *ApiEndpointServiceServer_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ApiEndpointServiceServer_List_Call) RunAndReturn(run func(context.Context, *endpoint.ListApiEndpointsRequest) (*endpoint.ListApiEndpointsResponse, error)) *ApiEndpointServiceServer_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewApiEndpointServiceServer creates a new instance of ApiEndpointServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApiEndpointServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ApiEndpointServiceServer {
	mock := &ApiEndpointServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
