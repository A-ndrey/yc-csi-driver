// Code generated by mockery v2.38.0. DO NOT EDIT.

package computemocks

import (
	context "context"

	compute "github.com/yandex-cloud/go-genproto/yandex/cloud/compute/v1"

	mock "github.com/stretchr/testify/mock"
)

// ZoneServiceServer is an autogenerated mock type for the ZoneServiceServer type
type ZoneServiceServer struct {
	mock.Mock
}

type ZoneServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *ZoneServiceServer) EXPECT() *ZoneServiceServer_Expecter {
	return &ZoneServiceServer_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *ZoneServiceServer) Get(_a0 context.Context, _a1 *compute.GetZoneRequest) (*compute.Zone, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *compute.Zone
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compute.GetZoneRequest) (*compute.Zone, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compute.GetZoneRequest) *compute.Zone); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.Zone)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compute.GetZoneRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ZoneServiceServer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ZoneServiceServer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *compute.GetZoneRequest
func (_e *ZoneServiceServer_Expecter) Get(_a0 interface{}, _a1 interface{}) *ZoneServiceServer_Get_Call {
	return &ZoneServiceServer_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *ZoneServiceServer_Get_Call) Run(run func(_a0 context.Context, _a1 *compute.GetZoneRequest)) *ZoneServiceServer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*compute.GetZoneRequest))
	})
	return _c
}

func (_c *ZoneServiceServer_Get_Call) Return(_a0 *compute.Zone, _a1 error) *ZoneServiceServer_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ZoneServiceServer_Get_Call) RunAndReturn(run func(context.Context, *compute.GetZoneRequest) (*compute.Zone, error)) *ZoneServiceServer_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: _a0, _a1
func (_m *ZoneServiceServer) List(_a0 context.Context, _a1 *compute.ListZonesRequest) (*compute.ListZonesResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *compute.ListZonesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compute.ListZonesRequest) (*compute.ListZonesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compute.ListZonesRequest) *compute.ListZonesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.ListZonesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compute.ListZonesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ZoneServiceServer_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ZoneServiceServer_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *compute.ListZonesRequest
func (_e *ZoneServiceServer_Expecter) List(_a0 interface{}, _a1 interface{}) *ZoneServiceServer_List_Call {
	return &ZoneServiceServer_List_Call{Call: _e.mock.On("List", _a0, _a1)}
}

func (_c *ZoneServiceServer_List_Call) Run(run func(_a0 context.Context, _a1 *compute.ListZonesRequest)) *ZoneServiceServer_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*compute.ListZonesRequest))
	})
	return _c
}

func (_c *ZoneServiceServer_List_Call) Return(_a0 *compute.ListZonesResponse, _a1 error) *ZoneServiceServer_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ZoneServiceServer_List_Call) RunAndReturn(run func(context.Context, *compute.ListZonesRequest) (*compute.ListZonesResponse, error)) *ZoneServiceServer_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewZoneServiceServer creates a new instance of ZoneServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewZoneServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ZoneServiceServer {
	mock := &ZoneServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
