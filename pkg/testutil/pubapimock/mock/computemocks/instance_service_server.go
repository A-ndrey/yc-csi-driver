// Code generated by mockery v2.43.2. DO NOT EDIT.

package computemocks

import (
	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	compute "github.com/yandex-cloud/go-genproto/yandex/cloud/compute/v1"

	context "context"

	mock "github.com/stretchr/testify/mock"

	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
)

// InstanceServiceServer is an autogenerated mock type for the InstanceServiceServer type
type InstanceServiceServer struct {
	mock.Mock
}

type InstanceServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *InstanceServiceServer) EXPECT() *InstanceServiceServer_Expecter {
	return &InstanceServiceServer_Expecter{mock: &_m.Mock}
}

// AddOneToOneNat provides a mock function with given fields: _a0, _a1
func (_m *InstanceServiceServer) AddOneToOneNat(_a0 context.Context, _a1 *compute.AddInstanceOneToOneNatRequest) (*operation.Operation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddOneToOneNat")
	}

	var r0 *operation.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compute.AddInstanceOneToOneNatRequest) (*operation.Operation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compute.AddInstanceOneToOneNatRequest) *operation.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compute.AddInstanceOneToOneNatRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstanceServiceServer_AddOneToOneNat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOneToOneNat'
type InstanceServiceServer_AddOneToOneNat_Call struct {
	*mock.Call
}

// AddOneToOneNat is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *compute.AddInstanceOneToOneNatRequest
func (_e *InstanceServiceServer_Expecter) AddOneToOneNat(_a0 interface{}, _a1 interface{}) *InstanceServiceServer_AddOneToOneNat_Call {
	return &InstanceServiceServer_AddOneToOneNat_Call{Call: _e.mock.On("AddOneToOneNat", _a0, _a1)}
}

func (_c *InstanceServiceServer_AddOneToOneNat_Call) Run(run func(_a0 context.Context, _a1 *compute.AddInstanceOneToOneNatRequest)) *InstanceServiceServer_AddOneToOneNat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*compute.AddInstanceOneToOneNatRequest))
	})
	return _c
}

func (_c *InstanceServiceServer_AddOneToOneNat_Call) Return(_a0 *operation.Operation, _a1 error) *InstanceServiceServer_AddOneToOneNat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InstanceServiceServer_AddOneToOneNat_Call) RunAndReturn(run func(context.Context, *compute.AddInstanceOneToOneNatRequest) (*operation.Operation, error)) *InstanceServiceServer_AddOneToOneNat_Call {
	_c.Call.Return(run)
	return _c
}

// AttachDisk provides a mock function with given fields: _a0, _a1
func (_m *InstanceServiceServer) AttachDisk(_a0 context.Context, _a1 *compute.AttachInstanceDiskRequest) (*operation.Operation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AttachDisk")
	}

	var r0 *operation.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compute.AttachInstanceDiskRequest) (*operation.Operation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compute.AttachInstanceDiskRequest) *operation.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compute.AttachInstanceDiskRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstanceServiceServer_AttachDisk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachDisk'
type InstanceServiceServer_AttachDisk_Call struct {
	*mock.Call
}

// AttachDisk is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *compute.AttachInstanceDiskRequest
func (_e *InstanceServiceServer_Expecter) AttachDisk(_a0 interface{}, _a1 interface{}) *InstanceServiceServer_AttachDisk_Call {
	return &InstanceServiceServer_AttachDisk_Call{Call: _e.mock.On("AttachDisk", _a0, _a1)}
}

func (_c *InstanceServiceServer_AttachDisk_Call) Run(run func(_a0 context.Context, _a1 *compute.AttachInstanceDiskRequest)) *InstanceServiceServer_AttachDisk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*compute.AttachInstanceDiskRequest))
	})
	return _c
}

func (_c *InstanceServiceServer_AttachDisk_Call) Return(_a0 *operation.Operation, _a1 error) *InstanceServiceServer_AttachDisk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InstanceServiceServer_AttachDisk_Call) RunAndReturn(run func(context.Context, *compute.AttachInstanceDiskRequest) (*operation.Operation, error)) *InstanceServiceServer_AttachDisk_Call {
	_c.Call.Return(run)
	return _c
}

// AttachFilesystem provides a mock function with given fields: _a0, _a1
func (_m *InstanceServiceServer) AttachFilesystem(_a0 context.Context, _a1 *compute.AttachInstanceFilesystemRequest) (*operation.Operation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AttachFilesystem")
	}

	var r0 *operation.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compute.AttachInstanceFilesystemRequest) (*operation.Operation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compute.AttachInstanceFilesystemRequest) *operation.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compute.AttachInstanceFilesystemRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstanceServiceServer_AttachFilesystem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AttachFilesystem'
type InstanceServiceServer_AttachFilesystem_Call struct {
	*mock.Call
}

// AttachFilesystem is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *compute.AttachInstanceFilesystemRequest
func (_e *InstanceServiceServer_Expecter) AttachFilesystem(_a0 interface{}, _a1 interface{}) *InstanceServiceServer_AttachFilesystem_Call {
	return &InstanceServiceServer_AttachFilesystem_Call{Call: _e.mock.On("AttachFilesystem", _a0, _a1)}
}

func (_c *InstanceServiceServer_AttachFilesystem_Call) Run(run func(_a0 context.Context, _a1 *compute.AttachInstanceFilesystemRequest)) *InstanceServiceServer_AttachFilesystem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*compute.AttachInstanceFilesystemRequest))
	})
	return _c
}

func (_c *InstanceServiceServer_AttachFilesystem_Call) Return(_a0 *operation.Operation, _a1 error) *InstanceServiceServer_AttachFilesystem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InstanceServiceServer_AttachFilesystem_Call) RunAndReturn(run func(context.Context, *compute.AttachInstanceFilesystemRequest) (*operation.Operation, error)) *InstanceServiceServer_AttachFilesystem_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *InstanceServiceServer) Create(_a0 context.Context, _a1 *compute.CreateInstanceRequest) (*operation.Operation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *operation.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compute.CreateInstanceRequest) (*operation.Operation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compute.CreateInstanceRequest) *operation.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compute.CreateInstanceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstanceServiceServer_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type InstanceServiceServer_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *compute.CreateInstanceRequest
func (_e *InstanceServiceServer_Expecter) Create(_a0 interface{}, _a1 interface{}) *InstanceServiceServer_Create_Call {
	return &InstanceServiceServer_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *InstanceServiceServer_Create_Call) Run(run func(_a0 context.Context, _a1 *compute.CreateInstanceRequest)) *InstanceServiceServer_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*compute.CreateInstanceRequest))
	})
	return _c
}

func (_c *InstanceServiceServer_Create_Call) Return(_a0 *operation.Operation, _a1 error) *InstanceServiceServer_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InstanceServiceServer_Create_Call) RunAndReturn(run func(context.Context, *compute.CreateInstanceRequest) (*operation.Operation, error)) *InstanceServiceServer_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *InstanceServiceServer) Delete(_a0 context.Context, _a1 *compute.DeleteInstanceRequest) (*operation.Operation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *operation.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compute.DeleteInstanceRequest) (*operation.Operation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compute.DeleteInstanceRequest) *operation.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compute.DeleteInstanceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstanceServiceServer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type InstanceServiceServer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *compute.DeleteInstanceRequest
func (_e *InstanceServiceServer_Expecter) Delete(_a0 interface{}, _a1 interface{}) *InstanceServiceServer_Delete_Call {
	return &InstanceServiceServer_Delete_Call{Call: _e.mock.On("Delete", _a0, _a1)}
}

func (_c *InstanceServiceServer_Delete_Call) Run(run func(_a0 context.Context, _a1 *compute.DeleteInstanceRequest)) *InstanceServiceServer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*compute.DeleteInstanceRequest))
	})
	return _c
}

func (_c *InstanceServiceServer_Delete_Call) Return(_a0 *operation.Operation, _a1 error) *InstanceServiceServer_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InstanceServiceServer_Delete_Call) RunAndReturn(run func(context.Context, *compute.DeleteInstanceRequest) (*operation.Operation, error)) *InstanceServiceServer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DetachDisk provides a mock function with given fields: _a0, _a1
func (_m *InstanceServiceServer) DetachDisk(_a0 context.Context, _a1 *compute.DetachInstanceDiskRequest) (*operation.Operation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DetachDisk")
	}

	var r0 *operation.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compute.DetachInstanceDiskRequest) (*operation.Operation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compute.DetachInstanceDiskRequest) *operation.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compute.DetachInstanceDiskRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstanceServiceServer_DetachDisk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachDisk'
type InstanceServiceServer_DetachDisk_Call struct {
	*mock.Call
}

// DetachDisk is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *compute.DetachInstanceDiskRequest
func (_e *InstanceServiceServer_Expecter) DetachDisk(_a0 interface{}, _a1 interface{}) *InstanceServiceServer_DetachDisk_Call {
	return &InstanceServiceServer_DetachDisk_Call{Call: _e.mock.On("DetachDisk", _a0, _a1)}
}

func (_c *InstanceServiceServer_DetachDisk_Call) Run(run func(_a0 context.Context, _a1 *compute.DetachInstanceDiskRequest)) *InstanceServiceServer_DetachDisk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*compute.DetachInstanceDiskRequest))
	})
	return _c
}

func (_c *InstanceServiceServer_DetachDisk_Call) Return(_a0 *operation.Operation, _a1 error) *InstanceServiceServer_DetachDisk_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InstanceServiceServer_DetachDisk_Call) RunAndReturn(run func(context.Context, *compute.DetachInstanceDiskRequest) (*operation.Operation, error)) *InstanceServiceServer_DetachDisk_Call {
	_c.Call.Return(run)
	return _c
}

// DetachFilesystem provides a mock function with given fields: _a0, _a1
func (_m *InstanceServiceServer) DetachFilesystem(_a0 context.Context, _a1 *compute.DetachInstanceFilesystemRequest) (*operation.Operation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DetachFilesystem")
	}

	var r0 *operation.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compute.DetachInstanceFilesystemRequest) (*operation.Operation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compute.DetachInstanceFilesystemRequest) *operation.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compute.DetachInstanceFilesystemRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstanceServiceServer_DetachFilesystem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetachFilesystem'
type InstanceServiceServer_DetachFilesystem_Call struct {
	*mock.Call
}

// DetachFilesystem is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *compute.DetachInstanceFilesystemRequest
func (_e *InstanceServiceServer_Expecter) DetachFilesystem(_a0 interface{}, _a1 interface{}) *InstanceServiceServer_DetachFilesystem_Call {
	return &InstanceServiceServer_DetachFilesystem_Call{Call: _e.mock.On("DetachFilesystem", _a0, _a1)}
}

func (_c *InstanceServiceServer_DetachFilesystem_Call) Run(run func(_a0 context.Context, _a1 *compute.DetachInstanceFilesystemRequest)) *InstanceServiceServer_DetachFilesystem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*compute.DetachInstanceFilesystemRequest))
	})
	return _c
}

func (_c *InstanceServiceServer_DetachFilesystem_Call) Return(_a0 *operation.Operation, _a1 error) *InstanceServiceServer_DetachFilesystem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InstanceServiceServer_DetachFilesystem_Call) RunAndReturn(run func(context.Context, *compute.DetachInstanceFilesystemRequest) (*operation.Operation, error)) *InstanceServiceServer_DetachFilesystem_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *InstanceServiceServer) Get(_a0 context.Context, _a1 *compute.GetInstanceRequest) (*compute.Instance, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *compute.Instance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compute.GetInstanceRequest) (*compute.Instance, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compute.GetInstanceRequest) *compute.Instance); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.Instance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compute.GetInstanceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstanceServiceServer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type InstanceServiceServer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *compute.GetInstanceRequest
func (_e *InstanceServiceServer_Expecter) Get(_a0 interface{}, _a1 interface{}) *InstanceServiceServer_Get_Call {
	return &InstanceServiceServer_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *InstanceServiceServer_Get_Call) Run(run func(_a0 context.Context, _a1 *compute.GetInstanceRequest)) *InstanceServiceServer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*compute.GetInstanceRequest))
	})
	return _c
}

func (_c *InstanceServiceServer_Get_Call) Return(_a0 *compute.Instance, _a1 error) *InstanceServiceServer_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InstanceServiceServer_Get_Call) RunAndReturn(run func(context.Context, *compute.GetInstanceRequest) (*compute.Instance, error)) *InstanceServiceServer_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetSerialPortOutput provides a mock function with given fields: _a0, _a1
func (_m *InstanceServiceServer) GetSerialPortOutput(_a0 context.Context, _a1 *compute.GetInstanceSerialPortOutputRequest) (*compute.GetInstanceSerialPortOutputResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSerialPortOutput")
	}

	var r0 *compute.GetInstanceSerialPortOutputResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compute.GetInstanceSerialPortOutputRequest) (*compute.GetInstanceSerialPortOutputResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compute.GetInstanceSerialPortOutputRequest) *compute.GetInstanceSerialPortOutputResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.GetInstanceSerialPortOutputResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compute.GetInstanceSerialPortOutputRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstanceServiceServer_GetSerialPortOutput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSerialPortOutput'
type InstanceServiceServer_GetSerialPortOutput_Call struct {
	*mock.Call
}

// GetSerialPortOutput is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *compute.GetInstanceSerialPortOutputRequest
func (_e *InstanceServiceServer_Expecter) GetSerialPortOutput(_a0 interface{}, _a1 interface{}) *InstanceServiceServer_GetSerialPortOutput_Call {
	return &InstanceServiceServer_GetSerialPortOutput_Call{Call: _e.mock.On("GetSerialPortOutput", _a0, _a1)}
}

func (_c *InstanceServiceServer_GetSerialPortOutput_Call) Run(run func(_a0 context.Context, _a1 *compute.GetInstanceSerialPortOutputRequest)) *InstanceServiceServer_GetSerialPortOutput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*compute.GetInstanceSerialPortOutputRequest))
	})
	return _c
}

func (_c *InstanceServiceServer_GetSerialPortOutput_Call) Return(_a0 *compute.GetInstanceSerialPortOutputResponse, _a1 error) *InstanceServiceServer_GetSerialPortOutput_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InstanceServiceServer_GetSerialPortOutput_Call) RunAndReturn(run func(context.Context, *compute.GetInstanceSerialPortOutputRequest) (*compute.GetInstanceSerialPortOutputResponse, error)) *InstanceServiceServer_GetSerialPortOutput_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: _a0, _a1
func (_m *InstanceServiceServer) List(_a0 context.Context, _a1 *compute.ListInstancesRequest) (*compute.ListInstancesResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *compute.ListInstancesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compute.ListInstancesRequest) (*compute.ListInstancesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compute.ListInstancesRequest) *compute.ListInstancesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.ListInstancesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compute.ListInstancesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstanceServiceServer_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type InstanceServiceServer_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *compute.ListInstancesRequest
func (_e *InstanceServiceServer_Expecter) List(_a0 interface{}, _a1 interface{}) *InstanceServiceServer_List_Call {
	return &InstanceServiceServer_List_Call{Call: _e.mock.On("List", _a0, _a1)}
}

func (_c *InstanceServiceServer_List_Call) Run(run func(_a0 context.Context, _a1 *compute.ListInstancesRequest)) *InstanceServiceServer_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*compute.ListInstancesRequest))
	})
	return _c
}

func (_c *InstanceServiceServer_List_Call) Return(_a0 *compute.ListInstancesResponse, _a1 error) *InstanceServiceServer_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InstanceServiceServer_List_Call) RunAndReturn(run func(context.Context, *compute.ListInstancesRequest) (*compute.ListInstancesResponse, error)) *InstanceServiceServer_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessBindings provides a mock function with given fields: _a0, _a1
func (_m *InstanceServiceServer) ListAccessBindings(_a0 context.Context, _a1 *access.ListAccessBindingsRequest) (*access.ListAccessBindingsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessBindings")
	}

	var r0 *access.ListAccessBindingsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.ListAccessBindingsRequest) (*access.ListAccessBindingsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.ListAccessBindingsRequest) *access.ListAccessBindingsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.ListAccessBindingsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.ListAccessBindingsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstanceServiceServer_ListAccessBindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessBindings'
type InstanceServiceServer_ListAccessBindings_Call struct {
	*mock.Call
}

// ListAccessBindings is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.ListAccessBindingsRequest
func (_e *InstanceServiceServer_Expecter) ListAccessBindings(_a0 interface{}, _a1 interface{}) *InstanceServiceServer_ListAccessBindings_Call {
	return &InstanceServiceServer_ListAccessBindings_Call{Call: _e.mock.On("ListAccessBindings", _a0, _a1)}
}

func (_c *InstanceServiceServer_ListAccessBindings_Call) Run(run func(_a0 context.Context, _a1 *access.ListAccessBindingsRequest)) *InstanceServiceServer_ListAccessBindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.ListAccessBindingsRequest))
	})
	return _c
}

func (_c *InstanceServiceServer_ListAccessBindings_Call) Return(_a0 *access.ListAccessBindingsResponse, _a1 error) *InstanceServiceServer_ListAccessBindings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InstanceServiceServer_ListAccessBindings_Call) RunAndReturn(run func(context.Context, *access.ListAccessBindingsRequest) (*access.ListAccessBindingsResponse, error)) *InstanceServiceServer_ListAccessBindings_Call {
	_c.Call.Return(run)
	return _c
}

// ListOperations provides a mock function with given fields: _a0, _a1
func (_m *InstanceServiceServer) ListOperations(_a0 context.Context, _a1 *compute.ListInstanceOperationsRequest) (*compute.ListInstanceOperationsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListOperations")
	}

	var r0 *compute.ListInstanceOperationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compute.ListInstanceOperationsRequest) (*compute.ListInstanceOperationsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compute.ListInstanceOperationsRequest) *compute.ListInstanceOperationsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compute.ListInstanceOperationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compute.ListInstanceOperationsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstanceServiceServer_ListOperations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOperations'
type InstanceServiceServer_ListOperations_Call struct {
	*mock.Call
}

// ListOperations is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *compute.ListInstanceOperationsRequest
func (_e *InstanceServiceServer_Expecter) ListOperations(_a0 interface{}, _a1 interface{}) *InstanceServiceServer_ListOperations_Call {
	return &InstanceServiceServer_ListOperations_Call{Call: _e.mock.On("ListOperations", _a0, _a1)}
}

func (_c *InstanceServiceServer_ListOperations_Call) Run(run func(_a0 context.Context, _a1 *compute.ListInstanceOperationsRequest)) *InstanceServiceServer_ListOperations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*compute.ListInstanceOperationsRequest))
	})
	return _c
}

func (_c *InstanceServiceServer_ListOperations_Call) Return(_a0 *compute.ListInstanceOperationsResponse, _a1 error) *InstanceServiceServer_ListOperations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InstanceServiceServer_ListOperations_Call) RunAndReturn(run func(context.Context, *compute.ListInstanceOperationsRequest) (*compute.ListInstanceOperationsResponse, error)) *InstanceServiceServer_ListOperations_Call {
	_c.Call.Return(run)
	return _c
}

// Move provides a mock function with given fields: _a0, _a1
func (_m *InstanceServiceServer) Move(_a0 context.Context, _a1 *compute.MoveInstanceRequest) (*operation.Operation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Move")
	}

	var r0 *operation.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compute.MoveInstanceRequest) (*operation.Operation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compute.MoveInstanceRequest) *operation.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compute.MoveInstanceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstanceServiceServer_Move_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Move'
type InstanceServiceServer_Move_Call struct {
	*mock.Call
}

// Move is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *compute.MoveInstanceRequest
func (_e *InstanceServiceServer_Expecter) Move(_a0 interface{}, _a1 interface{}) *InstanceServiceServer_Move_Call {
	return &InstanceServiceServer_Move_Call{Call: _e.mock.On("Move", _a0, _a1)}
}

func (_c *InstanceServiceServer_Move_Call) Run(run func(_a0 context.Context, _a1 *compute.MoveInstanceRequest)) *InstanceServiceServer_Move_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*compute.MoveInstanceRequest))
	})
	return _c
}

func (_c *InstanceServiceServer_Move_Call) Return(_a0 *operation.Operation, _a1 error) *InstanceServiceServer_Move_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InstanceServiceServer_Move_Call) RunAndReturn(run func(context.Context, *compute.MoveInstanceRequest) (*operation.Operation, error)) *InstanceServiceServer_Move_Call {
	_c.Call.Return(run)
	return _c
}

// Relocate provides a mock function with given fields: _a0, _a1
func (_m *InstanceServiceServer) Relocate(_a0 context.Context, _a1 *compute.RelocateInstanceRequest) (*operation.Operation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Relocate")
	}

	var r0 *operation.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compute.RelocateInstanceRequest) (*operation.Operation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compute.RelocateInstanceRequest) *operation.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compute.RelocateInstanceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstanceServiceServer_Relocate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Relocate'
type InstanceServiceServer_Relocate_Call struct {
	*mock.Call
}

// Relocate is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *compute.RelocateInstanceRequest
func (_e *InstanceServiceServer_Expecter) Relocate(_a0 interface{}, _a1 interface{}) *InstanceServiceServer_Relocate_Call {
	return &InstanceServiceServer_Relocate_Call{Call: _e.mock.On("Relocate", _a0, _a1)}
}

func (_c *InstanceServiceServer_Relocate_Call) Run(run func(_a0 context.Context, _a1 *compute.RelocateInstanceRequest)) *InstanceServiceServer_Relocate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*compute.RelocateInstanceRequest))
	})
	return _c
}

func (_c *InstanceServiceServer_Relocate_Call) Return(_a0 *operation.Operation, _a1 error) *InstanceServiceServer_Relocate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InstanceServiceServer_Relocate_Call) RunAndReturn(run func(context.Context, *compute.RelocateInstanceRequest) (*operation.Operation, error)) *InstanceServiceServer_Relocate_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveOneToOneNat provides a mock function with given fields: _a0, _a1
func (_m *InstanceServiceServer) RemoveOneToOneNat(_a0 context.Context, _a1 *compute.RemoveInstanceOneToOneNatRequest) (*operation.Operation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RemoveOneToOneNat")
	}

	var r0 *operation.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compute.RemoveInstanceOneToOneNatRequest) (*operation.Operation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compute.RemoveInstanceOneToOneNatRequest) *operation.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compute.RemoveInstanceOneToOneNatRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstanceServiceServer_RemoveOneToOneNat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveOneToOneNat'
type InstanceServiceServer_RemoveOneToOneNat_Call struct {
	*mock.Call
}

// RemoveOneToOneNat is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *compute.RemoveInstanceOneToOneNatRequest
func (_e *InstanceServiceServer_Expecter) RemoveOneToOneNat(_a0 interface{}, _a1 interface{}) *InstanceServiceServer_RemoveOneToOneNat_Call {
	return &InstanceServiceServer_RemoveOneToOneNat_Call{Call: _e.mock.On("RemoveOneToOneNat", _a0, _a1)}
}

func (_c *InstanceServiceServer_RemoveOneToOneNat_Call) Run(run func(_a0 context.Context, _a1 *compute.RemoveInstanceOneToOneNatRequest)) *InstanceServiceServer_RemoveOneToOneNat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*compute.RemoveInstanceOneToOneNatRequest))
	})
	return _c
}

func (_c *InstanceServiceServer_RemoveOneToOneNat_Call) Return(_a0 *operation.Operation, _a1 error) *InstanceServiceServer_RemoveOneToOneNat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InstanceServiceServer_RemoveOneToOneNat_Call) RunAndReturn(run func(context.Context, *compute.RemoveInstanceOneToOneNatRequest) (*operation.Operation, error)) *InstanceServiceServer_RemoveOneToOneNat_Call {
	_c.Call.Return(run)
	return _c
}

// Restart provides a mock function with given fields: _a0, _a1
func (_m *InstanceServiceServer) Restart(_a0 context.Context, _a1 *compute.RestartInstanceRequest) (*operation.Operation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Restart")
	}

	var r0 *operation.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compute.RestartInstanceRequest) (*operation.Operation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compute.RestartInstanceRequest) *operation.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compute.RestartInstanceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstanceServiceServer_Restart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Restart'
type InstanceServiceServer_Restart_Call struct {
	*mock.Call
}

// Restart is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *compute.RestartInstanceRequest
func (_e *InstanceServiceServer_Expecter) Restart(_a0 interface{}, _a1 interface{}) *InstanceServiceServer_Restart_Call {
	return &InstanceServiceServer_Restart_Call{Call: _e.mock.On("Restart", _a0, _a1)}
}

func (_c *InstanceServiceServer_Restart_Call) Run(run func(_a0 context.Context, _a1 *compute.RestartInstanceRequest)) *InstanceServiceServer_Restart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*compute.RestartInstanceRequest))
	})
	return _c
}

func (_c *InstanceServiceServer_Restart_Call) Return(_a0 *operation.Operation, _a1 error) *InstanceServiceServer_Restart_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InstanceServiceServer_Restart_Call) RunAndReturn(run func(context.Context, *compute.RestartInstanceRequest) (*operation.Operation, error)) *InstanceServiceServer_Restart_Call {
	_c.Call.Return(run)
	return _c
}

// SetAccessBindings provides a mock function with given fields: _a0, _a1
func (_m *InstanceServiceServer) SetAccessBindings(_a0 context.Context, _a1 *access.SetAccessBindingsRequest) (*operation.Operation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SetAccessBindings")
	}

	var r0 *operation.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.SetAccessBindingsRequest) (*operation.Operation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.SetAccessBindingsRequest) *operation.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.SetAccessBindingsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstanceServiceServer_SetAccessBindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAccessBindings'
type InstanceServiceServer_SetAccessBindings_Call struct {
	*mock.Call
}

// SetAccessBindings is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.SetAccessBindingsRequest
func (_e *InstanceServiceServer_Expecter) SetAccessBindings(_a0 interface{}, _a1 interface{}) *InstanceServiceServer_SetAccessBindings_Call {
	return &InstanceServiceServer_SetAccessBindings_Call{Call: _e.mock.On("SetAccessBindings", _a0, _a1)}
}

func (_c *InstanceServiceServer_SetAccessBindings_Call) Run(run func(_a0 context.Context, _a1 *access.SetAccessBindingsRequest)) *InstanceServiceServer_SetAccessBindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.SetAccessBindingsRequest))
	})
	return _c
}

func (_c *InstanceServiceServer_SetAccessBindings_Call) Return(_a0 *operation.Operation, _a1 error) *InstanceServiceServer_SetAccessBindings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InstanceServiceServer_SetAccessBindings_Call) RunAndReturn(run func(context.Context, *access.SetAccessBindingsRequest) (*operation.Operation, error)) *InstanceServiceServer_SetAccessBindings_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0, _a1
func (_m *InstanceServiceServer) Start(_a0 context.Context, _a1 *compute.StartInstanceRequest) (*operation.Operation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 *operation.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compute.StartInstanceRequest) (*operation.Operation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compute.StartInstanceRequest) *operation.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compute.StartInstanceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstanceServiceServer_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type InstanceServiceServer_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *compute.StartInstanceRequest
func (_e *InstanceServiceServer_Expecter) Start(_a0 interface{}, _a1 interface{}) *InstanceServiceServer_Start_Call {
	return &InstanceServiceServer_Start_Call{Call: _e.mock.On("Start", _a0, _a1)}
}

func (_c *InstanceServiceServer_Start_Call) Run(run func(_a0 context.Context, _a1 *compute.StartInstanceRequest)) *InstanceServiceServer_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*compute.StartInstanceRequest))
	})
	return _c
}

func (_c *InstanceServiceServer_Start_Call) Return(_a0 *operation.Operation, _a1 error) *InstanceServiceServer_Start_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InstanceServiceServer_Start_Call) RunAndReturn(run func(context.Context, *compute.StartInstanceRequest) (*operation.Operation, error)) *InstanceServiceServer_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: _a0, _a1
func (_m *InstanceServiceServer) Stop(_a0 context.Context, _a1 *compute.StopInstanceRequest) (*operation.Operation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 *operation.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compute.StopInstanceRequest) (*operation.Operation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compute.StopInstanceRequest) *operation.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compute.StopInstanceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstanceServiceServer_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type InstanceServiceServer_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *compute.StopInstanceRequest
func (_e *InstanceServiceServer_Expecter) Stop(_a0 interface{}, _a1 interface{}) *InstanceServiceServer_Stop_Call {
	return &InstanceServiceServer_Stop_Call{Call: _e.mock.On("Stop", _a0, _a1)}
}

func (_c *InstanceServiceServer_Stop_Call) Run(run func(_a0 context.Context, _a1 *compute.StopInstanceRequest)) *InstanceServiceServer_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*compute.StopInstanceRequest))
	})
	return _c
}

func (_c *InstanceServiceServer_Stop_Call) Return(_a0 *operation.Operation, _a1 error) *InstanceServiceServer_Stop_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InstanceServiceServer_Stop_Call) RunAndReturn(run func(context.Context, *compute.StopInstanceRequest) (*operation.Operation, error)) *InstanceServiceServer_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *InstanceServiceServer) Update(_a0 context.Context, _a1 *compute.UpdateInstanceRequest) (*operation.Operation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *operation.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compute.UpdateInstanceRequest) (*operation.Operation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compute.UpdateInstanceRequest) *operation.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compute.UpdateInstanceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstanceServiceServer_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type InstanceServiceServer_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *compute.UpdateInstanceRequest
func (_e *InstanceServiceServer_Expecter) Update(_a0 interface{}, _a1 interface{}) *InstanceServiceServer_Update_Call {
	return &InstanceServiceServer_Update_Call{Call: _e.mock.On("Update", _a0, _a1)}
}

func (_c *InstanceServiceServer_Update_Call) Run(run func(_a0 context.Context, _a1 *compute.UpdateInstanceRequest)) *InstanceServiceServer_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*compute.UpdateInstanceRequest))
	})
	return _c
}

func (_c *InstanceServiceServer_Update_Call) Return(_a0 *operation.Operation, _a1 error) *InstanceServiceServer_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InstanceServiceServer_Update_Call) RunAndReturn(run func(context.Context, *compute.UpdateInstanceRequest) (*operation.Operation, error)) *InstanceServiceServer_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccessBindings provides a mock function with given fields: _a0, _a1
func (_m *InstanceServiceServer) UpdateAccessBindings(_a0 context.Context, _a1 *access.UpdateAccessBindingsRequest) (*operation.Operation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccessBindings")
	}

	var r0 *operation.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.UpdateAccessBindingsRequest) (*operation.Operation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.UpdateAccessBindingsRequest) *operation.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.UpdateAccessBindingsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstanceServiceServer_UpdateAccessBindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccessBindings'
type InstanceServiceServer_UpdateAccessBindings_Call struct {
	*mock.Call
}

// UpdateAccessBindings is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.UpdateAccessBindingsRequest
func (_e *InstanceServiceServer_Expecter) UpdateAccessBindings(_a0 interface{}, _a1 interface{}) *InstanceServiceServer_UpdateAccessBindings_Call {
	return &InstanceServiceServer_UpdateAccessBindings_Call{Call: _e.mock.On("UpdateAccessBindings", _a0, _a1)}
}

func (_c *InstanceServiceServer_UpdateAccessBindings_Call) Run(run func(_a0 context.Context, _a1 *access.UpdateAccessBindingsRequest)) *InstanceServiceServer_UpdateAccessBindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.UpdateAccessBindingsRequest))
	})
	return _c
}

func (_c *InstanceServiceServer_UpdateAccessBindings_Call) Return(_a0 *operation.Operation, _a1 error) *InstanceServiceServer_UpdateAccessBindings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InstanceServiceServer_UpdateAccessBindings_Call) RunAndReturn(run func(context.Context, *access.UpdateAccessBindingsRequest) (*operation.Operation, error)) *InstanceServiceServer_UpdateAccessBindings_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMetadata provides a mock function with given fields: _a0, _a1
func (_m *InstanceServiceServer) UpdateMetadata(_a0 context.Context, _a1 *compute.UpdateInstanceMetadataRequest) (*operation.Operation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMetadata")
	}

	var r0 *operation.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compute.UpdateInstanceMetadataRequest) (*operation.Operation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compute.UpdateInstanceMetadataRequest) *operation.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compute.UpdateInstanceMetadataRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstanceServiceServer_UpdateMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMetadata'
type InstanceServiceServer_UpdateMetadata_Call struct {
	*mock.Call
}

// UpdateMetadata is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *compute.UpdateInstanceMetadataRequest
func (_e *InstanceServiceServer_Expecter) UpdateMetadata(_a0 interface{}, _a1 interface{}) *InstanceServiceServer_UpdateMetadata_Call {
	return &InstanceServiceServer_UpdateMetadata_Call{Call: _e.mock.On("UpdateMetadata", _a0, _a1)}
}

func (_c *InstanceServiceServer_UpdateMetadata_Call) Run(run func(_a0 context.Context, _a1 *compute.UpdateInstanceMetadataRequest)) *InstanceServiceServer_UpdateMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*compute.UpdateInstanceMetadataRequest))
	})
	return _c
}

func (_c *InstanceServiceServer_UpdateMetadata_Call) Return(_a0 *operation.Operation, _a1 error) *InstanceServiceServer_UpdateMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InstanceServiceServer_UpdateMetadata_Call) RunAndReturn(run func(context.Context, *compute.UpdateInstanceMetadataRequest) (*operation.Operation, error)) *InstanceServiceServer_UpdateMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNetworkInterface provides a mock function with given fields: _a0, _a1
func (_m *InstanceServiceServer) UpdateNetworkInterface(_a0 context.Context, _a1 *compute.UpdateInstanceNetworkInterfaceRequest) (*operation.Operation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNetworkInterface")
	}

	var r0 *operation.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *compute.UpdateInstanceNetworkInterfaceRequest) (*operation.Operation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *compute.UpdateInstanceNetworkInterfaceRequest) *operation.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *compute.UpdateInstanceNetworkInterfaceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstanceServiceServer_UpdateNetworkInterface_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNetworkInterface'
type InstanceServiceServer_UpdateNetworkInterface_Call struct {
	*mock.Call
}

// UpdateNetworkInterface is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *compute.UpdateInstanceNetworkInterfaceRequest
func (_e *InstanceServiceServer_Expecter) UpdateNetworkInterface(_a0 interface{}, _a1 interface{}) *InstanceServiceServer_UpdateNetworkInterface_Call {
	return &InstanceServiceServer_UpdateNetworkInterface_Call{Call: _e.mock.On("UpdateNetworkInterface", _a0, _a1)}
}

func (_c *InstanceServiceServer_UpdateNetworkInterface_Call) Run(run func(_a0 context.Context, _a1 *compute.UpdateInstanceNetworkInterfaceRequest)) *InstanceServiceServer_UpdateNetworkInterface_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*compute.UpdateInstanceNetworkInterfaceRequest))
	})
	return _c
}

func (_c *InstanceServiceServer_UpdateNetworkInterface_Call) Return(_a0 *operation.Operation, _a1 error) *InstanceServiceServer_UpdateNetworkInterface_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *InstanceServiceServer_UpdateNetworkInterface_Call) RunAndReturn(run func(context.Context, *compute.UpdateInstanceNetworkInterfaceRequest) (*operation.Operation, error)) *InstanceServiceServer_UpdateNetworkInterface_Call {
	_c.Call.Return(run)
	return _c
}

// NewInstanceServiceServer creates a new instance of InstanceServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInstanceServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *InstanceServiceServer {
	mock := &InstanceServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
