// Code generated by mockery v2.38.0. DO NOT EDIT.

package resourcemanagermocks

import (
	context "context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"

	mock "github.com/stretchr/testify/mock"

	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"

	resourcemanager "github.com/yandex-cloud/go-genproto/yandex/cloud/resourcemanager/v1"
)

// FolderServiceServer is an autogenerated mock type for the FolderServiceServer type
type FolderServiceServer struct {
	mock.Mock
}

type FolderServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *FolderServiceServer) EXPECT() *FolderServiceServer_Expecter {
	return &FolderServiceServer_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *FolderServiceServer) Create(_a0 context.Context, _a1 *resourcemanager.CreateFolderRequest) (*operation.Operation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *operation.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourcemanager.CreateFolderRequest) (*operation.Operation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourcemanager.CreateFolderRequest) *operation.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourcemanager.CreateFolderRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FolderServiceServer_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type FolderServiceServer_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *resourcemanager.CreateFolderRequest
func (_e *FolderServiceServer_Expecter) Create(_a0 interface{}, _a1 interface{}) *FolderServiceServer_Create_Call {
	return &FolderServiceServer_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *FolderServiceServer_Create_Call) Run(run func(_a0 context.Context, _a1 *resourcemanager.CreateFolderRequest)) *FolderServiceServer_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*resourcemanager.CreateFolderRequest))
	})
	return _c
}

func (_c *FolderServiceServer_Create_Call) Return(_a0 *operation.Operation, _a1 error) *FolderServiceServer_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FolderServiceServer_Create_Call) RunAndReturn(run func(context.Context, *resourcemanager.CreateFolderRequest) (*operation.Operation, error)) *FolderServiceServer_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *FolderServiceServer) Delete(_a0 context.Context, _a1 *resourcemanager.DeleteFolderRequest) (*operation.Operation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *operation.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourcemanager.DeleteFolderRequest) (*operation.Operation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourcemanager.DeleteFolderRequest) *operation.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourcemanager.DeleteFolderRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FolderServiceServer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type FolderServiceServer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *resourcemanager.DeleteFolderRequest
func (_e *FolderServiceServer_Expecter) Delete(_a0 interface{}, _a1 interface{}) *FolderServiceServer_Delete_Call {
	return &FolderServiceServer_Delete_Call{Call: _e.mock.On("Delete", _a0, _a1)}
}

func (_c *FolderServiceServer_Delete_Call) Run(run func(_a0 context.Context, _a1 *resourcemanager.DeleteFolderRequest)) *FolderServiceServer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*resourcemanager.DeleteFolderRequest))
	})
	return _c
}

func (_c *FolderServiceServer_Delete_Call) Return(_a0 *operation.Operation, _a1 error) *FolderServiceServer_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FolderServiceServer_Delete_Call) RunAndReturn(run func(context.Context, *resourcemanager.DeleteFolderRequest) (*operation.Operation, error)) *FolderServiceServer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *FolderServiceServer) Get(_a0 context.Context, _a1 *resourcemanager.GetFolderRequest) (*resourcemanager.Folder, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *resourcemanager.Folder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourcemanager.GetFolderRequest) (*resourcemanager.Folder, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourcemanager.GetFolderRequest) *resourcemanager.Folder); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcemanager.Folder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourcemanager.GetFolderRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FolderServiceServer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type FolderServiceServer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *resourcemanager.GetFolderRequest
func (_e *FolderServiceServer_Expecter) Get(_a0 interface{}, _a1 interface{}) *FolderServiceServer_Get_Call {
	return &FolderServiceServer_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *FolderServiceServer_Get_Call) Run(run func(_a0 context.Context, _a1 *resourcemanager.GetFolderRequest)) *FolderServiceServer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*resourcemanager.GetFolderRequest))
	})
	return _c
}

func (_c *FolderServiceServer_Get_Call) Return(_a0 *resourcemanager.Folder, _a1 error) *FolderServiceServer_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FolderServiceServer_Get_Call) RunAndReturn(run func(context.Context, *resourcemanager.GetFolderRequest) (*resourcemanager.Folder, error)) *FolderServiceServer_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: _a0, _a1
func (_m *FolderServiceServer) List(_a0 context.Context, _a1 *resourcemanager.ListFoldersRequest) (*resourcemanager.ListFoldersResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *resourcemanager.ListFoldersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourcemanager.ListFoldersRequest) (*resourcemanager.ListFoldersResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourcemanager.ListFoldersRequest) *resourcemanager.ListFoldersResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcemanager.ListFoldersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourcemanager.ListFoldersRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FolderServiceServer_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type FolderServiceServer_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *resourcemanager.ListFoldersRequest
func (_e *FolderServiceServer_Expecter) List(_a0 interface{}, _a1 interface{}) *FolderServiceServer_List_Call {
	return &FolderServiceServer_List_Call{Call: _e.mock.On("List", _a0, _a1)}
}

func (_c *FolderServiceServer_List_Call) Run(run func(_a0 context.Context, _a1 *resourcemanager.ListFoldersRequest)) *FolderServiceServer_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*resourcemanager.ListFoldersRequest))
	})
	return _c
}

func (_c *FolderServiceServer_List_Call) Return(_a0 *resourcemanager.ListFoldersResponse, _a1 error) *FolderServiceServer_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FolderServiceServer_List_Call) RunAndReturn(run func(context.Context, *resourcemanager.ListFoldersRequest) (*resourcemanager.ListFoldersResponse, error)) *FolderServiceServer_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessBindings provides a mock function with given fields: _a0, _a1
func (_m *FolderServiceServer) ListAccessBindings(_a0 context.Context, _a1 *access.ListAccessBindingsRequest) (*access.ListAccessBindingsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessBindings")
	}

	var r0 *access.ListAccessBindingsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.ListAccessBindingsRequest) (*access.ListAccessBindingsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.ListAccessBindingsRequest) *access.ListAccessBindingsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.ListAccessBindingsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.ListAccessBindingsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FolderServiceServer_ListAccessBindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessBindings'
type FolderServiceServer_ListAccessBindings_Call struct {
	*mock.Call
}

// ListAccessBindings is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.ListAccessBindingsRequest
func (_e *FolderServiceServer_Expecter) ListAccessBindings(_a0 interface{}, _a1 interface{}) *FolderServiceServer_ListAccessBindings_Call {
	return &FolderServiceServer_ListAccessBindings_Call{Call: _e.mock.On("ListAccessBindings", _a0, _a1)}
}

func (_c *FolderServiceServer_ListAccessBindings_Call) Run(run func(_a0 context.Context, _a1 *access.ListAccessBindingsRequest)) *FolderServiceServer_ListAccessBindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.ListAccessBindingsRequest))
	})
	return _c
}

func (_c *FolderServiceServer_ListAccessBindings_Call) Return(_a0 *access.ListAccessBindingsResponse, _a1 error) *FolderServiceServer_ListAccessBindings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FolderServiceServer_ListAccessBindings_Call) RunAndReturn(run func(context.Context, *access.ListAccessBindingsRequest) (*access.ListAccessBindingsResponse, error)) *FolderServiceServer_ListAccessBindings_Call {
	_c.Call.Return(run)
	return _c
}

// ListOperations provides a mock function with given fields: _a0, _a1
func (_m *FolderServiceServer) ListOperations(_a0 context.Context, _a1 *resourcemanager.ListFolderOperationsRequest) (*resourcemanager.ListFolderOperationsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListOperations")
	}

	var r0 *resourcemanager.ListFolderOperationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourcemanager.ListFolderOperationsRequest) (*resourcemanager.ListFolderOperationsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourcemanager.ListFolderOperationsRequest) *resourcemanager.ListFolderOperationsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcemanager.ListFolderOperationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourcemanager.ListFolderOperationsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FolderServiceServer_ListOperations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOperations'
type FolderServiceServer_ListOperations_Call struct {
	*mock.Call
}

// ListOperations is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *resourcemanager.ListFolderOperationsRequest
func (_e *FolderServiceServer_Expecter) ListOperations(_a0 interface{}, _a1 interface{}) *FolderServiceServer_ListOperations_Call {
	return &FolderServiceServer_ListOperations_Call{Call: _e.mock.On("ListOperations", _a0, _a1)}
}

func (_c *FolderServiceServer_ListOperations_Call) Run(run func(_a0 context.Context, _a1 *resourcemanager.ListFolderOperationsRequest)) *FolderServiceServer_ListOperations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*resourcemanager.ListFolderOperationsRequest))
	})
	return _c
}

func (_c *FolderServiceServer_ListOperations_Call) Return(_a0 *resourcemanager.ListFolderOperationsResponse, _a1 error) *FolderServiceServer_ListOperations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FolderServiceServer_ListOperations_Call) RunAndReturn(run func(context.Context, *resourcemanager.ListFolderOperationsRequest) (*resourcemanager.ListFolderOperationsResponse, error)) *FolderServiceServer_ListOperations_Call {
	_c.Call.Return(run)
	return _c
}

// SetAccessBindings provides a mock function with given fields: _a0, _a1
func (_m *FolderServiceServer) SetAccessBindings(_a0 context.Context, _a1 *access.SetAccessBindingsRequest) (*operation.Operation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SetAccessBindings")
	}

	var r0 *operation.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.SetAccessBindingsRequest) (*operation.Operation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.SetAccessBindingsRequest) *operation.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.SetAccessBindingsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FolderServiceServer_SetAccessBindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAccessBindings'
type FolderServiceServer_SetAccessBindings_Call struct {
	*mock.Call
}

// SetAccessBindings is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.SetAccessBindingsRequest
func (_e *FolderServiceServer_Expecter) SetAccessBindings(_a0 interface{}, _a1 interface{}) *FolderServiceServer_SetAccessBindings_Call {
	return &FolderServiceServer_SetAccessBindings_Call{Call: _e.mock.On("SetAccessBindings", _a0, _a1)}
}

func (_c *FolderServiceServer_SetAccessBindings_Call) Run(run func(_a0 context.Context, _a1 *access.SetAccessBindingsRequest)) *FolderServiceServer_SetAccessBindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.SetAccessBindingsRequest))
	})
	return _c
}

func (_c *FolderServiceServer_SetAccessBindings_Call) Return(_a0 *operation.Operation, _a1 error) *FolderServiceServer_SetAccessBindings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FolderServiceServer_SetAccessBindings_Call) RunAndReturn(run func(context.Context, *access.SetAccessBindingsRequest) (*operation.Operation, error)) *FolderServiceServer_SetAccessBindings_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *FolderServiceServer) Update(_a0 context.Context, _a1 *resourcemanager.UpdateFolderRequest) (*operation.Operation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *operation.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourcemanager.UpdateFolderRequest) (*operation.Operation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourcemanager.UpdateFolderRequest) *operation.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourcemanager.UpdateFolderRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FolderServiceServer_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type FolderServiceServer_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *resourcemanager.UpdateFolderRequest
func (_e *FolderServiceServer_Expecter) Update(_a0 interface{}, _a1 interface{}) *FolderServiceServer_Update_Call {
	return &FolderServiceServer_Update_Call{Call: _e.mock.On("Update", _a0, _a1)}
}

func (_c *FolderServiceServer_Update_Call) Run(run func(_a0 context.Context, _a1 *resourcemanager.UpdateFolderRequest)) *FolderServiceServer_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*resourcemanager.UpdateFolderRequest))
	})
	return _c
}

func (_c *FolderServiceServer_Update_Call) Return(_a0 *operation.Operation, _a1 error) *FolderServiceServer_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FolderServiceServer_Update_Call) RunAndReturn(run func(context.Context, *resourcemanager.UpdateFolderRequest) (*operation.Operation, error)) *FolderServiceServer_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccessBindings provides a mock function with given fields: _a0, _a1
func (_m *FolderServiceServer) UpdateAccessBindings(_a0 context.Context, _a1 *access.UpdateAccessBindingsRequest) (*operation.Operation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccessBindings")
	}

	var r0 *operation.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.UpdateAccessBindingsRequest) (*operation.Operation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.UpdateAccessBindingsRequest) *operation.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.UpdateAccessBindingsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FolderServiceServer_UpdateAccessBindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccessBindings'
type FolderServiceServer_UpdateAccessBindings_Call struct {
	*mock.Call
}

// UpdateAccessBindings is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.UpdateAccessBindingsRequest
func (_e *FolderServiceServer_Expecter) UpdateAccessBindings(_a0 interface{}, _a1 interface{}) *FolderServiceServer_UpdateAccessBindings_Call {
	return &FolderServiceServer_UpdateAccessBindings_Call{Call: _e.mock.On("UpdateAccessBindings", _a0, _a1)}
}

func (_c *FolderServiceServer_UpdateAccessBindings_Call) Run(run func(_a0 context.Context, _a1 *access.UpdateAccessBindingsRequest)) *FolderServiceServer_UpdateAccessBindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.UpdateAccessBindingsRequest))
	})
	return _c
}

func (_c *FolderServiceServer_UpdateAccessBindings_Call) Return(_a0 *operation.Operation, _a1 error) *FolderServiceServer_UpdateAccessBindings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FolderServiceServer_UpdateAccessBindings_Call) RunAndReturn(run func(context.Context, *access.UpdateAccessBindingsRequest) (*operation.Operation, error)) *FolderServiceServer_UpdateAccessBindings_Call {
	_c.Call.Return(run)
	return _c
}

// NewFolderServiceServer creates a new instance of FolderServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFolderServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *FolderServiceServer {
	mock := &FolderServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
