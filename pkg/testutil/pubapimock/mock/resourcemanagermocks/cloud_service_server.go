// Code generated by mockery v2.43.2. DO NOT EDIT.

package resourcemanagermocks

import (
	context "context"

	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"

	mock "github.com/stretchr/testify/mock"

	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"

	resourcemanager "github.com/yandex-cloud/go-genproto/yandex/cloud/resourcemanager/v1"
)

// CloudServiceServer is an autogenerated mock type for the CloudServiceServer type
type CloudServiceServer struct {
	mock.Mock
}

type CloudServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *CloudServiceServer) EXPECT() *CloudServiceServer_Expecter {
	return &CloudServiceServer_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *CloudServiceServer) Create(_a0 context.Context, _a1 *resourcemanager.CreateCloudRequest) (*operation.Operation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *operation.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourcemanager.CreateCloudRequest) (*operation.Operation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourcemanager.CreateCloudRequest) *operation.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourcemanager.CreateCloudRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudServiceServer_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type CloudServiceServer_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *resourcemanager.CreateCloudRequest
func (_e *CloudServiceServer_Expecter) Create(_a0 interface{}, _a1 interface{}) *CloudServiceServer_Create_Call {
	return &CloudServiceServer_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *CloudServiceServer_Create_Call) Run(run func(_a0 context.Context, _a1 *resourcemanager.CreateCloudRequest)) *CloudServiceServer_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*resourcemanager.CreateCloudRequest))
	})
	return _c
}

func (_c *CloudServiceServer_Create_Call) Return(_a0 *operation.Operation, _a1 error) *CloudServiceServer_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudServiceServer_Create_Call) RunAndReturn(run func(context.Context, *resourcemanager.CreateCloudRequest) (*operation.Operation, error)) *CloudServiceServer_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *CloudServiceServer) Delete(_a0 context.Context, _a1 *resourcemanager.DeleteCloudRequest) (*operation.Operation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *operation.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourcemanager.DeleteCloudRequest) (*operation.Operation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourcemanager.DeleteCloudRequest) *operation.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourcemanager.DeleteCloudRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudServiceServer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type CloudServiceServer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *resourcemanager.DeleteCloudRequest
func (_e *CloudServiceServer_Expecter) Delete(_a0 interface{}, _a1 interface{}) *CloudServiceServer_Delete_Call {
	return &CloudServiceServer_Delete_Call{Call: _e.mock.On("Delete", _a0, _a1)}
}

func (_c *CloudServiceServer_Delete_Call) Run(run func(_a0 context.Context, _a1 *resourcemanager.DeleteCloudRequest)) *CloudServiceServer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*resourcemanager.DeleteCloudRequest))
	})
	return _c
}

func (_c *CloudServiceServer_Delete_Call) Return(_a0 *operation.Operation, _a1 error) *CloudServiceServer_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudServiceServer_Delete_Call) RunAndReturn(run func(context.Context, *resourcemanager.DeleteCloudRequest) (*operation.Operation, error)) *CloudServiceServer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *CloudServiceServer) Get(_a0 context.Context, _a1 *resourcemanager.GetCloudRequest) (*resourcemanager.Cloud, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *resourcemanager.Cloud
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourcemanager.GetCloudRequest) (*resourcemanager.Cloud, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourcemanager.GetCloudRequest) *resourcemanager.Cloud); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcemanager.Cloud)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourcemanager.GetCloudRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudServiceServer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type CloudServiceServer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *resourcemanager.GetCloudRequest
func (_e *CloudServiceServer_Expecter) Get(_a0 interface{}, _a1 interface{}) *CloudServiceServer_Get_Call {
	return &CloudServiceServer_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *CloudServiceServer_Get_Call) Run(run func(_a0 context.Context, _a1 *resourcemanager.GetCloudRequest)) *CloudServiceServer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*resourcemanager.GetCloudRequest))
	})
	return _c
}

func (_c *CloudServiceServer_Get_Call) Return(_a0 *resourcemanager.Cloud, _a1 error) *CloudServiceServer_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudServiceServer_Get_Call) RunAndReturn(run func(context.Context, *resourcemanager.GetCloudRequest) (*resourcemanager.Cloud, error)) *CloudServiceServer_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: _a0, _a1
func (_m *CloudServiceServer) List(_a0 context.Context, _a1 *resourcemanager.ListCloudsRequest) (*resourcemanager.ListCloudsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *resourcemanager.ListCloudsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourcemanager.ListCloudsRequest) (*resourcemanager.ListCloudsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourcemanager.ListCloudsRequest) *resourcemanager.ListCloudsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcemanager.ListCloudsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourcemanager.ListCloudsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudServiceServer_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type CloudServiceServer_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *resourcemanager.ListCloudsRequest
func (_e *CloudServiceServer_Expecter) List(_a0 interface{}, _a1 interface{}) *CloudServiceServer_List_Call {
	return &CloudServiceServer_List_Call{Call: _e.mock.On("List", _a0, _a1)}
}

func (_c *CloudServiceServer_List_Call) Run(run func(_a0 context.Context, _a1 *resourcemanager.ListCloudsRequest)) *CloudServiceServer_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*resourcemanager.ListCloudsRequest))
	})
	return _c
}

func (_c *CloudServiceServer_List_Call) Return(_a0 *resourcemanager.ListCloudsResponse, _a1 error) *CloudServiceServer_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudServiceServer_List_Call) RunAndReturn(run func(context.Context, *resourcemanager.ListCloudsRequest) (*resourcemanager.ListCloudsResponse, error)) *CloudServiceServer_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccessBindings provides a mock function with given fields: _a0, _a1
func (_m *CloudServiceServer) ListAccessBindings(_a0 context.Context, _a1 *access.ListAccessBindingsRequest) (*access.ListAccessBindingsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessBindings")
	}

	var r0 *access.ListAccessBindingsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.ListAccessBindingsRequest) (*access.ListAccessBindingsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.ListAccessBindingsRequest) *access.ListAccessBindingsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*access.ListAccessBindingsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.ListAccessBindingsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudServiceServer_ListAccessBindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccessBindings'
type CloudServiceServer_ListAccessBindings_Call struct {
	*mock.Call
}

// ListAccessBindings is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.ListAccessBindingsRequest
func (_e *CloudServiceServer_Expecter) ListAccessBindings(_a0 interface{}, _a1 interface{}) *CloudServiceServer_ListAccessBindings_Call {
	return &CloudServiceServer_ListAccessBindings_Call{Call: _e.mock.On("ListAccessBindings", _a0, _a1)}
}

func (_c *CloudServiceServer_ListAccessBindings_Call) Run(run func(_a0 context.Context, _a1 *access.ListAccessBindingsRequest)) *CloudServiceServer_ListAccessBindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.ListAccessBindingsRequest))
	})
	return _c
}

func (_c *CloudServiceServer_ListAccessBindings_Call) Return(_a0 *access.ListAccessBindingsResponse, _a1 error) *CloudServiceServer_ListAccessBindings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudServiceServer_ListAccessBindings_Call) RunAndReturn(run func(context.Context, *access.ListAccessBindingsRequest) (*access.ListAccessBindingsResponse, error)) *CloudServiceServer_ListAccessBindings_Call {
	_c.Call.Return(run)
	return _c
}

// ListOperations provides a mock function with given fields: _a0, _a1
func (_m *CloudServiceServer) ListOperations(_a0 context.Context, _a1 *resourcemanager.ListCloudOperationsRequest) (*resourcemanager.ListCloudOperationsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListOperations")
	}

	var r0 *resourcemanager.ListCloudOperationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourcemanager.ListCloudOperationsRequest) (*resourcemanager.ListCloudOperationsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourcemanager.ListCloudOperationsRequest) *resourcemanager.ListCloudOperationsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcemanager.ListCloudOperationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourcemanager.ListCloudOperationsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudServiceServer_ListOperations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOperations'
type CloudServiceServer_ListOperations_Call struct {
	*mock.Call
}

// ListOperations is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *resourcemanager.ListCloudOperationsRequest
func (_e *CloudServiceServer_Expecter) ListOperations(_a0 interface{}, _a1 interface{}) *CloudServiceServer_ListOperations_Call {
	return &CloudServiceServer_ListOperations_Call{Call: _e.mock.On("ListOperations", _a0, _a1)}
}

func (_c *CloudServiceServer_ListOperations_Call) Run(run func(_a0 context.Context, _a1 *resourcemanager.ListCloudOperationsRequest)) *CloudServiceServer_ListOperations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*resourcemanager.ListCloudOperationsRequest))
	})
	return _c
}

func (_c *CloudServiceServer_ListOperations_Call) Return(_a0 *resourcemanager.ListCloudOperationsResponse, _a1 error) *CloudServiceServer_ListOperations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudServiceServer_ListOperations_Call) RunAndReturn(run func(context.Context, *resourcemanager.ListCloudOperationsRequest) (*resourcemanager.ListCloudOperationsResponse, error)) *CloudServiceServer_ListOperations_Call {
	_c.Call.Return(run)
	return _c
}

// SetAccessBindings provides a mock function with given fields: _a0, _a1
func (_m *CloudServiceServer) SetAccessBindings(_a0 context.Context, _a1 *access.SetAccessBindingsRequest) (*operation.Operation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SetAccessBindings")
	}

	var r0 *operation.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.SetAccessBindingsRequest) (*operation.Operation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.SetAccessBindingsRequest) *operation.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.SetAccessBindingsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudServiceServer_SetAccessBindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAccessBindings'
type CloudServiceServer_SetAccessBindings_Call struct {
	*mock.Call
}

// SetAccessBindings is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.SetAccessBindingsRequest
func (_e *CloudServiceServer_Expecter) SetAccessBindings(_a0 interface{}, _a1 interface{}) *CloudServiceServer_SetAccessBindings_Call {
	return &CloudServiceServer_SetAccessBindings_Call{Call: _e.mock.On("SetAccessBindings", _a0, _a1)}
}

func (_c *CloudServiceServer_SetAccessBindings_Call) Run(run func(_a0 context.Context, _a1 *access.SetAccessBindingsRequest)) *CloudServiceServer_SetAccessBindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.SetAccessBindingsRequest))
	})
	return _c
}

func (_c *CloudServiceServer_SetAccessBindings_Call) Return(_a0 *operation.Operation, _a1 error) *CloudServiceServer_SetAccessBindings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudServiceServer_SetAccessBindings_Call) RunAndReturn(run func(context.Context, *access.SetAccessBindingsRequest) (*operation.Operation, error)) *CloudServiceServer_SetAccessBindings_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *CloudServiceServer) Update(_a0 context.Context, _a1 *resourcemanager.UpdateCloudRequest) (*operation.Operation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *operation.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourcemanager.UpdateCloudRequest) (*operation.Operation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourcemanager.UpdateCloudRequest) *operation.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourcemanager.UpdateCloudRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudServiceServer_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type CloudServiceServer_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *resourcemanager.UpdateCloudRequest
func (_e *CloudServiceServer_Expecter) Update(_a0 interface{}, _a1 interface{}) *CloudServiceServer_Update_Call {
	return &CloudServiceServer_Update_Call{Call: _e.mock.On("Update", _a0, _a1)}
}

func (_c *CloudServiceServer_Update_Call) Run(run func(_a0 context.Context, _a1 *resourcemanager.UpdateCloudRequest)) *CloudServiceServer_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*resourcemanager.UpdateCloudRequest))
	})
	return _c
}

func (_c *CloudServiceServer_Update_Call) Return(_a0 *operation.Operation, _a1 error) *CloudServiceServer_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudServiceServer_Update_Call) RunAndReturn(run func(context.Context, *resourcemanager.UpdateCloudRequest) (*operation.Operation, error)) *CloudServiceServer_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccessBindings provides a mock function with given fields: _a0, _a1
func (_m *CloudServiceServer) UpdateAccessBindings(_a0 context.Context, _a1 *access.UpdateAccessBindingsRequest) (*operation.Operation, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccessBindings")
	}

	var r0 *operation.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *access.UpdateAccessBindingsRequest) (*operation.Operation, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *access.UpdateAccessBindingsRequest) *operation.Operation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operation.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *access.UpdateAccessBindingsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloudServiceServer_UpdateAccessBindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccessBindings'
type CloudServiceServer_UpdateAccessBindings_Call struct {
	*mock.Call
}

// UpdateAccessBindings is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *access.UpdateAccessBindingsRequest
func (_e *CloudServiceServer_Expecter) UpdateAccessBindings(_a0 interface{}, _a1 interface{}) *CloudServiceServer_UpdateAccessBindings_Call {
	return &CloudServiceServer_UpdateAccessBindings_Call{Call: _e.mock.On("UpdateAccessBindings", _a0, _a1)}
}

func (_c *CloudServiceServer_UpdateAccessBindings_Call) Run(run func(_a0 context.Context, _a1 *access.UpdateAccessBindingsRequest)) *CloudServiceServer_UpdateAccessBindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*access.UpdateAccessBindingsRequest))
	})
	return _c
}

func (_c *CloudServiceServer_UpdateAccessBindings_Call) Return(_a0 *operation.Operation, _a1 error) *CloudServiceServer_UpdateAccessBindings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CloudServiceServer_UpdateAccessBindings_Call) RunAndReturn(run func(context.Context, *access.UpdateAccessBindingsRequest) (*operation.Operation, error)) *CloudServiceServer_UpdateAccessBindings_Call {
	_c.Call.Return(run)
	return _c
}

// NewCloudServiceServer creates a new instance of CloudServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCloudServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *CloudServiceServer {
	mock := &CloudServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
